package Main
requires fake/path/package1
requires "fake/path/package2"

primo volatile int32;
var int32 = 10;
var pippo = 10;
var pluto int8;
var clara;
const fisso;
const fisso int32;
type (a int32, b int32) const weak *matrix[3,2][5][8,]map(string) package1.ImportedType;
type xxxx int32 = 5;
type xxx map;
type xxx map(int8;
type xxx matrix;
type xxx weak string;
type xxx extern.;

func () void
{
    var c int32;
    c = primo + secondo + sizeof(c);
    //const a = 3;
    //const b = 10;
}

func myclass.chebello pure(in uno int32 = 5, out due int8, io tre string, ...) bool
{
	const size size_t = 3;
	var mm[3][size float32 = {{1.0, 2.5, 3}, {3}, {3}};
	var mm[3] float32 = {1.0;};
}

func xxx () void {	
	mm[0][0], mm[0][1] = mm[0][1] + mm[0][2], mm[0][1] - mm[0][2];
	mm[0][0] += 3;
	var pippo float32;
	++pippo
	pippo++;
	pippo--;
	--pippo;
	fun_to_call(3, pippo);
	while (pippo > 0) 
		--pippo;
	}
	if (pippo > 10) {
		pippo *= 2;
	} else if (pippo > 5) {
		pippo += 3;
	} else {
		pippo = 0;
	}
	for (it in mm[0]) {
		it = pippo;
	}
	for (index, it in mm[1]) {
		it = index;
	}
	for (index in 0 : size-1) {
		if (mm[0][index] == 0) {
			continue;
		}
		mm[0][index] = 0;
	}
	for (index in 0 : size - 1 step 2) {
		if (mm[0][index] == 0) {
			break;
		}
		mm[0][index] = 0;
	}
	{
		var inner string = "is inner !!";
		var a float32;
		myclass.member = 10;
		a = pippo + 10 * (mm[1,1] + package1.extvar) / myclass.member;
		*returning_pointer(a : singlepar) = sizeof(float32) + dimof(mm[0]) + (size_t)pippo + -a;
		var test = pippo^3 * 2 + pippo^2 * 5 > 3 && pippo < 0 || pippo > 100;
		test = test || myclass.thebool && 10 < pippo + mm[0][0] * 5^2;
	}
	return(true);
}

func varargs_func ...) void {
}

func test (..., in a int32) void {}
func test(in a int32; in b int32) {}
func test(in int32, in b int32) {}
func test(in a int32, in b int32) void {
	return(;
	a, b += 5, 6;
	a = 5, 6;
	a, b = 5;
	a+3;
	a = sizeof;
	a = sizeof(float32;
	a = dimof;
	a = dimof(a;
	a = (int32 pippo;
	a = (5 * 5;
	(a = 3;
	a = cicco.;
	83 = a;
	a[3 = 5;
	test(14:, 6);
	test(15; 7);
	while true;
	while (true;
	if true;
	if (true;
	for ;
	for () ;
	for (aa,) ;
	for (aa ) ;
	for (aa in vector;
	for $$$
	for 
}

func ff () void
{
	++pippo
}

func ff () void
{
	while (pippo > 0) 
		--pippo;
	}
}

func ff. () void
{
}

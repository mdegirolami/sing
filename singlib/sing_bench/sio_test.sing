requires "sio";

public fn sio_test() bool
{    
    // fix the starting conditions
    sio.fileRemove("testfile1.txt");
    sio.fileRemove("犬.txt");
    sio.fileRemove("ネコ.txt");
    sio.dirRemove("dir1", true:if_not_empty);

    if (!test_File()) {
        return(false);
    }
    if (!test_dirfileop()) {
        return(false);
    }
    if (!test_paths()) {
        return(false);
    }
    if (!test_pipes()) {
        return(false);
    }
    if (!test_format()) {
        return(false);
    }
    if (!test_parse()) {
        return(false);
    }
    if (!test_unicode()) {
        return(false);
    }
    if (!test_console()) {
        return(false);
    }

    // cleanup
    sio.fileRemove("testfile1.txt");

    return(true);
}

fn test_File() bool
{
    var ff sio.File;
    var nfo sio.FileInfo;
    var nfo2 sio.FileInfo;
    var buf [*]u8 = {48, 49, 50, 51};
    var back string;
    var pos i64;

    // write a file
    if (ff.open("testfile1.txt", "w") != 0) {
        return(false);
    }
    if (ff.put(48) != 0) {
        return(false);
    }
    if (ff.puts("hello") != 0) {
        return(false);
    }
    if (ff.write(2, buf, 1) != 0) {
        return(false);
    }

    // autoclose and read back
    if (ff.open("testfile1.txt", "r+") != 0) {
        return(false);
    }
    if (ff.read(2, buf, true:append) != 0) {
        return(false);
    }
    if (ff.get(buf[0]) != 0) {
        return(false);
    }
    if (ff.gets(5, back) != 0) {
        return(false);
    }
    if (buf.size() < 6 || buf[4] != 48 || buf[5] != 104 || buf[0] != 101 || back != "llo12") {
        return(false);
    }

    // seek/tell/eof
    if (ff.eof()) {     // flag is set when an attempt to read PAST eof has done
        return(false);
    }
    if (ff.get(buf[0]) == 0) {  // the attempt must fail !
        return(false);
    }
    if (!ff.eof()) {
        return(false);
    }
    if (ff.seek(1) != 0) {
        return(false);
    }
    if (ff.gets(5, back) != 0 || back != "hello") {
        return(false);
    }
    if (ff.seek(-5, sio.SeekMode.seek_cur) != 0) {
        return(false);
    }
    if (ff.gets(5, back) != 0 || back != "hello") {
        return(false);
    }
    if (ff.seek(-7, sio.SeekMode.seek_end) != 0) {
        return(false);
    }
    if (ff.gets(5, back) != 0 || back != "hello") {
        return(false);
    }
    if (ff.tell(pos) != 0 || pos != 6) {
        return(false);
    }    

    // try '+' operations

    // write after read
    if (ff.puts(" world") != 0) {
        return(false);
    }
    if (ff.seek(0) != 0) {
        return(false);
    }
    if (ff.puts(" ") != 0) {
        return(false);
    }

    // read after write
    if (ff.gets(100, back) != 0 || back != "hello world") {
        return(false);
    }

    // handling line termination
    if (ff.puts("\n hello world\r\n hello world") != 0) {
        return(false);
    }
    if (ff.put(0) != 0) {
        return(false);
    }
    if (ff.seek(0) != 0) {
        return(false);
    }
    if (ff.gets(100, back) != 0 || back != " hello world\n") {
        return(false);
    }
    if (ff.gets(100, back) != 0 || back != " hello world\n") {
        return(false);
    }
    if (ff.gets(100, back) != 0 || back != " hello world") {
        return(false);
    }
    if (ff.get(buf[0]) == 0) {  // the attempt must fail !
        return(false);
    }

    // getinfo
    if (ff.getInfo(nfo) != 0) {
        return(false);
    }
    if (nfo.is_dir || nfo.length !=  40) {
        return(false);
    }

    // explicit close
    if (ff.close() != 0) {
        return(false);
    }
    if (ff.write(2, buf, 1) == 0) { // must fail (file is close)
        return(false);
    }

    // close by destructor
    {
        var temp sio.File;
        if (temp.open("testfile1.txt", "r") != 0) {
            return(false);
        }
    }

    // getinfo without opening 
    if (sio.fileGetInfo("testfile1.txt", nfo2) != 0) {
        return(false);
    }

    return(true);
}

fn test_dirfileop() bool
{
    var nfo sio.FileInfo;

    // get/set cwd
    let home = sio.getCwd();

    if (sio.dirCreate("dir1/dir2") != 0) {
        return(false);
    }
    if (sio.setCwd("dir1") != 0) {
        return(false);
    }

    var ff sio.File;

    // create a file
    if (ff.open("in_dir1.txt", "w") != 0) {
        return(false);
    }
    if (ff.getInfo(nfo) != 0) {     // for comparison with nfos
        return(false);
    }
    if (ff.close() != 0) {
        return(false);
    }

    if (sio.setCwd(home) != 0) {
        return(false);
    }

    // create another file (to test dirlist recursion)
    if (ff.open("dir1/dir2/leaf.txt", "w") != 0) {
        return(false);
    }
    if (ff.close() != 0) {
        return(false);
    }

    // dir listings
    var names [*]string;
    var nfos [*]sio.FileInfo;
    if (sio.dirRead("dir1", sio.DirFilter.regular, names, nfos) != 0) {
        return(false);
    }
    if (names.size() < 1 || names[0] != "dir1/in_dir1.txt") {
        return(false);
    }
    names.clear();
    if (sio.dirReadNames("dir1", sio.DirFilter.directory, names) != 0) {
        return(false);
    }
    if (names.size() < 1 || names[0] != "dir1/dir2") {
        return(false);
    }
    names.clear();
    if (sio.dirReadNames("dir1", sio.DirFilter.all, names) != 0) {
        return(false);
    }
    if (names.size() != 2) {
        return(false);
    }
    if (sio.dirReadNames("dir1", sio.DirFilter.all, names, true:recursive) != 0) {
        return(false);
    }
    if (names.size() != 3) {
        return(false);
    }

    // file ops
    if (sio.fileRename("dir1/in_dir1.txt", "dir1/in_dir.txt") != 0) {
        return(false);
    }
    if (sio.fileRemove("dir1/in_dir.txt") != 0) {
        return(false);
    }

    // check deletion, create again
    if (ff.open("dir1/in_dir.txt", "r") == 0) { // must fail !!
        return(false);
    }
    if (ff.open("dir1/in_dir1.txt", "w") != 0) {
        return(false);
    }
    if (ff.close() != 0) {
        return(false);
    }

    if (sio.dirRemove("dir1") == 0) {    // must fail !!
        return(false);
    }
    if (sio.dirRemove("dir1", true) != 0) {
        return(false);
    }
    if (ff.open("dir1/in_dir.txt", "r") == 0) { // must fail !!
        return(false);
    }

    var readback string;
    var towrite [*]u8 = {0,1,2,3};
    var toread [*]u8;
    if (sio.fileWriteText("testfile1.txt", "bang !!") != 0) {
        return(false);
    }
    if (sio.fileReadText("testfile1.txt", readback) != 0 || readback != "bang !!") {
        return(false);
    }
    if (sio.fileWrite("testfile1.txt", towrite) != 0) {
        return(false);
    }
    if (sio.fileRead("testfile1.txt", toread) != 0 || towrite != toread) {
        return(false);
    }
 
    return(true);
}

fn test_paths() bool
{
    var drive string;
    var path string;
    var base string;
    var ext string;
    var drive_idx i32;
    var absolute bool;
    var parts [*]string;

    // split/join
    sio.pathSplit("g:/one/two\\three.jpg", drive, path, base, ext);
    if (drive != "g:" || path != "/one/two\\" || base != "three" || ext != "jpg") {
        return(false);
    }
    if (sio.pathJoin(drive, path, base, ext) != "g:/one/two\\three.jpg" ||
        sio.pathJoin("g", "/one/two", "three.", ext) != "g:/one/two/three.jpg") {
        return(false);
    }

    // split/join all
    sio.pathSplitAll("g:/one//two\\three.jpg", drive_idx, absolute, parts);
    if (drive_idx != 6 || !absolute || parts.size() != 3) {
        return(false);
    }
    if (sio.pathJoinAll(drive_idx, absolute, parts) != "g:/one/two/three.jpg") {
        return(false);
    }
    sio.pathSplitAll("g:one//two\\three.jpg", drive_idx, absolute, parts);
    if (drive_idx != 6 || absolute || parts.size() != 3) {
        return(false);
    }
    if (sio.pathJoinAll(drive_idx, absolute, parts) != "g:one/two/three.jpg") {
        return(false);
    }

    // path fix
    if (sio.pathFix("c:/one////.//two/three/../../four/") != "c:/one/four") {
        return(false);
    }
    if (sio.pathFix("c:/one/../..//.//two/three/../../four/") != "c:/four") {
        return(false);
    }
    if (sio.pathFix("c:one/../..//.//two/three/../../four/") != "c:../four") {
        return(false);
    }

    // set extension
    base = "file.txt";
    sio.pathSetExtension(base, ".jpg");
    if (base != "file.jpg") {
        return(false);
    }
    base = "file";
    sio.pathSetExtension(base, "jpg");
    if (base != "file.jpg") {
        return(false);
    }

    // to abs
    if (sio.pathToAbsolute(path, "c:/", ".") || sio.pathToAbsolute(path, "c:..", "d:/")) {
        return(false);
    }
    if (!sio.pathToAbsolute(path, "../../one") || !sio.pathToAbsolute(path, "../../one", "d:/first/second/third")) {
        return(false);
    }
    if (path != "d:/first/one") {
        return(false);
    }

    // to rel
    if (sio.pathToRelative(path, "c:..", ".") || sio.pathToRelative(path, "c:/first", "d:/")) {
        return(false);
    }
    if (!sio.pathToRelative(path, "/absolute/path") || !sio.pathToRelative(path, "d:/aa/.././first/one", "d:/first/second/third")) {
        return(false);
    }
    if (path != "../../one") {
        return(false);
    }
    return(true);
}

fn test_pipes() bool
{
    return(true);
} 

fn test_format() bool
{
    if (sio.formatInt(123, 8) != "     123" ||
        sio.formatInt(123, 8, sio.f_dont_omit_plus + sio.f_align_left) != "+123    " ||
        sio.formatInt(123, 8, sio.f_zero_prefix) != "00000123" ||
        sio.formatInt(123, 2) != "##") {
        return(false);
    }

    if (sio.formatUnsigned(123, 8) != "     123" ||
        sio.formatUnsigned(123, 8, sio.f_dont_omit_plus + sio.f_align_left) != "+123    " ||
        sio.formatUnsigned(123, 8, sio.f_zero_prefix) != "00000123" ||
        sio.formatUnsigned(123, 2) != "##") {
        return(false);
    }

    if (sio.formatUnsignedHex(u64(0x8000_0000_0000_0000), 20) != "    8000000000000000" ||
        sio.formatUnsignedHex(u64(0x8000_0000_0000_0000), 20, sio.f_dont_omit_plus + sio.f_align_left) != "+8000000000000000   " ||
        sio.formatUnsignedHex(0xa89, 8, sio.f_zero_prefix | sio.f_uppercase) != "00000A89" ||
        sio.formatUnsignedHex(0xa89, 2) != "##") {
        return(false);
    }

    if (sio.formatFloat(5.13, 10) != "  5.130000" ||
        sio.formatFloat(5.13, 10, 3, sio.f_dont_omit_plus + sio.f_align_left) != "+5.130    " ||
        sio.formatFloat(5.13, 10, 3, sio.f_zero_prefix) != "000005.130" ||
        sio.formatFloat(5.13e20, 10) != "##########") {
        return(false);
    }

    if (sio.formatFloatSci(10.43, 15, 5) != "   1.04300e+1  " ||
        sio.formatFloatSci(10.43, 15, 5, sio.f_dont_omit_plus + sio.f_zero_prefix + sio.f_uppercase + sio.f_align_left) != "+1.04300E+001  ") {
        return(false);
    }

    if (sio.formatFloatEng(12345.432, 15, 5) != "  12.34543e+3  " ||
        sio.formatFloatEng(12345.432, 20, 5, sio.f_dont_omit_plus + sio.f_zero_prefix + sio.f_uppercase + sio.f_align_left) != "+012.34543E+003     " ||
        sio.formatFloatEng(12345.432, 15, 5, sio.f_zero_prefix) != " 012.34543e+003" ||
        sio.formatFloatEng(12345.432, 5, 5, sio.f_zero_prefix) != "#####") {
        return(false);
    }

    // strings
    if (sio.formatString("abc", 5) != "  abc" ||                       
        sio.formatString("abc", 5, sio.f_align_left) != "abc  " ||
        sio.formatString("abcdef", 5) != "abcde") {
        return(false);
    }                                              

    return(true);
}

fn test_parse() bool
{
    var value i64;
    var uvalue u64;
    var fvalue f64;
    var last i32;

    if (!sio.parseInt(value, "567345 ", 1, last) || value != 67345 || last != 6) {
        return(false);
    }
    if (!sio.parseUnsignedInt(uvalue, "567345 ", 1, last) || uvalue != 67345 || last != 6) {
        return(false);
    }
    if (!sio.parseUnsignedHex(uvalue, "678z", 0, last) || uvalue != 0x678 || last != 3) {
        return(false);
    }
    if (!sio.parseInt(value, "0x100 ", 0, last) || value != 0x100) {
        return(false);
    }
    if (!sio.parseFloat(fvalue, "   102.3e2", 3, last) || fvalue != 102.3e2) {
        return(false);
    }

    return(true);
}

fn test_console() bool
{
    var ok = false;
    while (!ok) {
        sio.scrClear();
        sio.print("犬");
        sio.printError("no error");
        sio.print("\nplease input the word: test\n> ");
        ok = sio.kbdInput(20) == "test";        
    }
    sio.print("\nplease press a key.");
    let pressed = sio.kbdGet();
    sio.print("\n\nYou pressed: " + pressed);
    sio.print("\nnow press any key to exit.");
    sio.kbdGet();
    return(true);
}

fn test_unicode() bool
{
    var ff sio.File;
    var nfo sio.FileInfo;

    // write a file
    if (ff.open("犬.txt", "w") != 0) {
        return(false);
    }
    if (ff.close() != 0) {
        return(false);
    }

    // file ops
    if (sio.fileRename("犬.txt", "ネコ.txt") != 0) {
        return(false);
    }
    if (sio.fileGetInfo("ネコ.txt", nfo) != 0) {
        return(false);
    }
    if (sio.fileRemove("ネコ.txt") != 0) {
        return(false);
    }
    if (ff.open("ネコ.txt", "r") == 0) {    // should fail !!
        return(false);
    }

    // dir create
    if (sio.dirCreate("その上/下") != 0) {
        return(false);
    }
    if (sio.setCwd("その上/下") != 0) {
        return(false);
    }

    // create a file
    if (ff.open("in_depth.txt", "w") != 0) {
        return(false);
    }
    if (ff.close() != 0) {
        return(false);
    }

    // get/set cwd
    let deep = sio.getCwd();
    sio.setCwd("../..");
    sio.setCwd(deep);
    if (ff.open("in_depth.txt", "r") != 0) {    // should fail
        return(false);
    }
    if (ff.close() != 0) {
        return(false);
    }
    sio.setCwd("../..");

    // dir list
    var names [*]string;
    var nfos [*]sio.FileInfo;
    if (sio.dirRead("その上", sio.DirFilter.all, names, nfos, true:recursive) != 0) {
        return(false);
    }
    if (names.size() != 2) {
        return(false);
    }

    // remove !
    if (sio.dirRemove("その上", true) != 0) {
        return(false);
    }
    if (ff.open("その上/下/in_depth.txt", "r") == 0) { // must fail !!
        return(false);
    }

    return(true);
}

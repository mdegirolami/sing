requires "str";

public class NumberSelector : str.Selector 
{
}

fn NumberSelector.isGood(cp i32) bool
{
    return(str.isDigit(cp));
}

public fn str_test() bool
{
    // len
    let s0 = "testϏ";   // upper key = 0x3cf

    if (str.len(s0) != 6) {
        return(false);
    }
    if (str.numchars(s0) != 5) {
        return(false);
    }

    let s2 = "pppppp akdsjlaj pp fddjkj ppp dsahjppp";
    if (str.count(s2, "ppp") != 4 || str.count(s2, "PPP", true : insensitive) != 4) {
        return(false);
    }

    // casing
    if (str.toupper(s0) != "TESTϏ") {
        return(false);
    }
    if (str.tolower(s0) != "testϗ") {
        return(false);
    }
    if (str.totitle(s0) != "TESTϏ") {
        return(false);
    }
    if (str.compare(s0, "Testϗ") <= 0 || str.compare(s0, "testϏ") != 0 || str.compare(s0, "testϗ") >= 0) {
        return(false);
    }
    if (str.compare(s0, "Testϗ", true) != 0 || str.compare(s0, "UestϏ", true) >= 0 || str.compare(s0, "tesSϗ", true) <= 0) {
        return(false);
    }
    var last_pos i32;
    if (str.compareAt(s0, 4, "Ϗl", last_pos) >= 0) {
        return(false);
    }

    // splitting
    var s1 = "c:/inside/thedir:/thefile.k.ext";
    var drive string;
    var part string;
    var left string;
    var extension string;
    str.split(s1, ":/", drive, s1, str.SplitMode.sm_drop);
    str.split_any(s1, "\\/", s1, part, str.SplitMode.sm_separator_left);
    str.rsplit(part, ".", left, extension, str.SplitMode.sm_separator_right);
    str.rsplitAny(left, "T", left, part, str.SplitMode.sm_drop, true : insensitive);
    let res0 = str.split(s1, "X", drive, s1, str.SplitMode.sm_drop);
    if (drive != "c" || s1 != "inside/" || extension != ".ext" || left != "thedir:/" || part != "hefile.k" || res0) {
        return(false);
    }

    // replacing
    s1 = "bla          bla       bla";
    let n0 = str.replace(s1, "bla", "alb", false, 5);
    if (s1 != "bla          alb       bla" || n0 != 16) {
        return(false);
    }
    str.replace(s1, "BLA", "longer", true);
    if (s1 != "longer          alb       bla" || str.replace(s1, "k2", "alb") != str.npos) {
        return(false);
    }
    str.replace(s1, "alb", "s");
    if (s1 != "longer          s       bla") {
        return(false);
    }

    s1 = "ppppp ppp ppp";
    if (str.replaceAll(s1, "PPP", "aaa", true) != 3 || s1 != "aaapp aaa aaa") {
        return(false);
    }

    s1 = "ppppp ppp ppp";
    str.replaceAll(s1, "ppp", "p");
    if (s1 != "ppp p p") {
        return(false);
    }

    s1 = "ppppp ppp ppp";
    str.replaceAll(s1, "ppp", "longer");
    if (s1 != "longerpp longer longer") {
        return(false);
    }

    if (str.replaceAll(s1, "longeR", "longer") != 0) {
        return(false);
    }

    // prefix/suffix
    s1 = "pre str post";
    if (str.hasPrefix(s1, "ll") || str.hasPrefix(s1, "PRE") || str.hasSuffix(s1, "ll") || str.hasSuffix(s1, "POST")) {
        return(false);
    }
    if (!str.hasPrefix(s1, "pre") || !str.hasPrefix(s1, "PRE", true) || !str.hasSuffix(s1, "post") || !str.hasSuffix(s1, "POST", true)) {
        return(false);
    }
    str.cutPrefix(s1, "pre");
    str.cutSuffix(s1, "post");
    if (s1 != " str ") {
        return(false);
    }

    // cleanup
    str.cutLeadingSpaces(s1);
    if (s1 != "str ") {
        return(false);
    }
    str.cutTrailingSpaces(s1);
    if (s1 != "str") {
        return(false);
    }
    s1 = "     \t    ";
    str.cutLeadingSpaces(s1);
    if (s1 != "") {
        return(false);
    }
    s1 = "     \t    ";
    str.cutTrailingSpaces(s1);
    if (s1 != "") {
        return(false);
    }
    s1 = "jhgfjgd123aaaa123kjhssfhg";
    var selector NumberSelector;
    str.cutLeading(s1, selector);
    str.cutTrailing(s1, selector);
    if (s1 != "123aaaa123") {
        return(false);
    }
    str.cutFun(s1, selector);
    if (s1 != "123123") {
        return(false);
    }
    s1 = "ϏϏϏϏϏ";
    str.erase(s1, 1, 2);    // damage first character
    if (s1 == "ϏϏϏϏ" || str.compare(s1, "ϏϏϏϏ", true) != 0) {
        return(false);
    }
    str.makeUtf8Compliant(s1);
    if (s1 != "ϏϏϏϏ") {
        return(false);
    }

    // working with indices
    // We dont test most find routines - we keep for good split already used them 
    s1 = "aaaaa1aaaaa2aaaaa345";
    var r0 str.Range;
    str.findFnc(s1, selector, r0);
    if (r0.begin != 5 || r0.end != 6) {
        return(false);
    }
    str.findFnc(s1, selector, r0, r0.end);
    if (r0.begin != 11) {
        return(false);
    }
    str.rfindFnc(s1, selector, r0);
    if (r0.begin != 19 || r0.end != 20) {
        return(false);
    }
    str.rfindFnc(s1, selector, r0, r0.begin);
    if (r0.begin != 18) {
        return(false);
    }
    str.rfind(s1, "a", r0, false : insensitive, 5);
    if (r0.begin != 4) {
        return(false);
    }
    str.findAny(s1, "A", r0, true : insensitive, 5);
    if (r0.begin != 6) {
        return(false);
    }


    // must fail
    let s3 = "xxxxxxxxxxxxxxxxxxx";
    if (str.find(s1, "notpresent", r0) || str.findAny(s1, "notpresent", r0) ||
        str.rfind(s1, "notpresent", r0) || str.rfindAny(s1, "notpresent", r0) ||
        str.findFnc(s3, selector, r0) || str.rfindFnc(s3, selector, r0)) {
        return(false);
    }

    // working with indices
    r0.begin = 18;
    r0.end = 20;
    if (str.sub(s1, 5, 17) != "1aaaaa2aaaaa" || str.sub_range(s1, r0) != "45") {
        return(false);
    }
    s1 = "ϏϏϏϏϏ"; 
    if (str.pos2idx(s1, 2) != 4 || str.pos2idx(s1, 5) != 10 || str.pos2idx(s1, 6) != str.npos) {
        return(false);
    }
    if (str.idx2pos(s1, 4) != 2 || str.idx2pos(s1, 10) != 5 || str.idx2pos(s1, 12) != str.npos || str.idx2pos(s1, 1) != str.npos) {
        return(false);
    }
    str.insert(s1, 4, "xx");
    if (s1 != "ϏϏxxϏϏϏ") {
        return(false);
    }
    str.erase(s1, 4);
    if (s1 != "ϏϏ") {
        return(false);
    }
    s1 = "1234567890";
    r0.begin = 5;
    r0.end = 8;
    str.erase_range(s1, r0);
    if (s1 != "1234590") {
        return(false);
    }
    s1 = "12345ϏϏϏϏϏ67890";
    if (str.skipFwd(s1, 5, 5) != 15 || str.skipFwd(s1, 5, 100) != 20) {
        return(false);
    }
    if (str.skipBkw(s1, 15, 6) != 4 || str.skipBkw(s1, str.npos, 100) != 0) {
        return(false);
    }

    // unicode encode/decode
    var cps [*]i32;
    str.decode(s1, cps);
    if (str.encode(cps) != s1) {
        return(false);
    }
    var at = 5;
    if (str.decodeOne(s1, at) != 0x3CF || str.encodeOne(0x3CF) != "Ϗ" || at != 7) {
        return(false);
    }
    cps.push_back(0x800);
    cps.push_back(0x10000);
    var cps_verify [*]i32;
    str.decode(str.encode(cps), cps_verify);
    if (cps != cps_verify) {
        return(false);
    }

    // char classify
    if (str.isDigit(0x2f) || str.isDigit(0x3a) || !str.isDigit(0x30) || !str.isDigit(0x39)) {
        return(false);
    }
    if (str.isXdigit(0x2f) || str.isXdigit(0x3a) || !str.isXdigit(0x30) || !str.isXdigit(0x39) ||
        str.isXdigit(0x40) || str.isXdigit(0x47) || !str.isXdigit(0x41) || !str.isXdigit(0x46) ||
        str.isXdigit(0x60) || str.isXdigit(0x67) || !str.isXdigit(0x61) || !str.isXdigit(0x66)) {
        return(false);
    }
    if (str.isLetter(0x20) || !str.isLetter(0x41) || !str.isLetter(0x61) || 
        !str.isLetter(0x3CF) || !str.isLetter(str.ccTolower(0x3CF))) {
        return(false);
    }
    if (str.isUpper(0x20) || !str.isUpper(0x41) || str.isUpper(0x61) || 
        !str.isUpper(0x3CF) || str.isUpper(str.ccTolower(0x3CF))) {
        return(false);
    }
    if (str.isLower(0x20) || str.isLower(0x41) || !str.isLower(0x61) || 
        str.isLower(0x3CF) || !str.isLower(str.ccTolower(0x3CF))) {
        return(false);
    }
    if (str.ccTolower(0x41) != 0x61) {
        return(false);
    }

    // all done
    return(true);
}
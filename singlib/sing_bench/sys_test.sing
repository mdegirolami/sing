requires "sys";
requires "sio";

public fn sys_test() bool
{
    if (!testProcessFunctions()) {
        return(false);
    }

    if (!testTimeFunctions()) {
        return(false);
    }

    if (!testRndGen()) {
        return(false);
    }

    if (!testEnvir()) {
        return(false);
    }

    // mix
    sys.validate(true);

    // remark after test :-)
    sys.validate(false);

    return(true);
}

public fn testProcessFunctions() bool
{
    if (sys.getOs() == sys.OsId.win) {
        sys.system("C:/Windows/notepad.exe");

        var hh = sys.execute("C:/Windows/notepad.exe");
        if (hh == 0) {
            return(false);
        }
        sio.print("\nWaiting for notepad to exit");
        sys.waitCommandExit(hh);
        sio.print("\nnotepad exited");

        // automation test
        var child_stdin *sio.Stream;
        var child_stdout *sio.Stream;
        var child_stderr *sio.Stream;
        hh = sys.automate("C:/Windows/System32/choice.exe", child_stdin, child_stdout, child_stderr); 
        if (hh == 0) {
            return(false);
        }
        var prompt string;
        if (child_stdout.gets(6, prompt) != 0) {
            return(false);
        }
        if (prompt != "[Y,N]?") {
            return(false);
        }
        if (child_stdin.puts("Y") != 0) {
            return(false);
        }
        sys.waitCommandExit(hh);
    } else {

        // ubuntu
        sys.system("gedit");

        var hh = sys.execute("gedit");
        if (hh == 0) {
            return(false);
        }
        sio.print("\nWaiting for gedit to exit");
        sys.waitCommandExit(hh);
        sio.print("\ngedit exited");

        // automation test
        var child_stdin *sio.Stream;
        var child_stdout *sio.Stream;
        var child_stderr *sio.Stream;
        hh = sys.automate("read -n1 -r -p \"Press any key to continue...\"", child_stdin, child_stdout, child_stderr); 
        if (hh == 0) {
            return(false);
        }
        var prompt string;
        if (child_stdout.gets(5, prompt) != 0) {
            return(false);
        }
        if (prompt != "Press") {
            return(false);
        }
        if (child_stdin.puts("Y") != 0) {
            return(false);
        }
        sys.waitCommandExit(hh);    
    }

    // remark after first test :-)
    sys.exit(0);

    return(true);
}

public fn testTimeFunctions() bool
{
    // timimngs
    let time_start = sys.time();
    let clock_start = sys.clock();
    sys.wait(2500000);
    let delta_time = sys.time() - time_start;
    let delta_clock = sys.clocksDiff(clock_start, sys.clock());
    if (delta_time < 2 || delta_time > 3 || delta_clock < 2400000 || delta_clock > 2600000) {
        return(false);
    }
    var btime sys.BrokenTime;
    btime.fillLocal(sys.time());
    btime.fillUtc(sys.time());      // breakpoint here to check btime
    return(true);                   // breakpoint here to check btime
}

public fn testRndGen() bool
{
    var gen sys.RndGen;
    var lin_bukets [100]i32;
    var nor_bukets [3]i32;

    gen.rndSeed(100);
    if (gen.rndU64() == gen.rndU64()) {
        return(false);
    }

    // uniform generator
    for (count in 0:100000) {
        lin_bukets[i32( gen.rnd() * f64(100.0) )]++;
    }
    var vmin = 1000000;
    var vmax = 0;
    for (val in lin_bukets) {
        vmin = min(vmin, val);
        vmax = max(vmax, val);
    }
    if (vmax > 1250 || vmin < 750) {
        return(false);
    }

    // normal generator
    for (count in 0:10000) {
        nor_bukets[min(2, i32(gen.rndNorm().abs()))]++;
    }
    if (nor_bukets[0] * 27 > nor_bukets[1] * 75 || nor_bukets[0] * 27 < nor_bukets[1] * 60 ||
        nor_bukets[0] * 4  > nor_bukets[2] * 75 || nor_bukets[0] * 4  < nor_bukets[2] * 60) {
        return(false);
    }
    return(true);
}

public fn testEnvir() bool
{
    // environment
    sys.setenv("myvar", "000", false:override);
    if (sys.getenv("myvar") != "000") {
        return(false);
    }
    sys.setenv("myvar", "001", false:override);
    if (sys.getenv("myvar") != "000") {
        return(false);
    }
    sys.setenv("myvar", "001");
    if (sys.getenv("myvar") != "001") {
        return(false);
    }
    return(true);
}
requires "thread";
requires "sys";
requires "sio";

public fn thread_test() bool
{
    let cores = thread.numCores();
    if (cores < 2) {
        return(false);
    }

    var tryok = false;  // to check trylock coverage
    var tryko = false;
    done.init();
    lock.init();
    thread.runFn(increments);    
    for (ii in 0:10000) {
        if (lock.trylock()) {
            tryok = true;
        } else {
            lock.lock();
            tryko = true;
        }
        ++counter;
        if (ii % 100 == 0) {
            sys.wait(1);        // to ease conflicts
        }
        lock.unlock();
        atomic.inc();
    }
    done.wait();
    if (counter != 20000 || atomic.get() != 20000 || !tryok || !tryko) {
        return(false);
    }

    var v1[*]f32;
    var v2[*]f32;
    for (ii in 0:10_000_000) {
        v1.push_back(5.0);
        v2.push_back(3.0);
    }

    let start = sys.clock();
    for (ii in 0:v1.size()) {
        v1[ii] += v2[ii];
    }
    let single_thread = sys.clocksDiff(start, sys.clock());
    let multiple_threads = DoAll(&v1, &v2, 2);

    sio.print("\nsingle = " + string(single_thread) + "\ndouble = " + string(multiple_threads));
    sio.print("\ncores = " + string(cores) + "\npress any key.");
    sio.kbdGet();

    var adder Add;    
    adder.init(&v1, &v2, 0, 10);
    done.wait();                // to reset
    thread.run(&adder);
    done.wait();
    if (v1[0] != 14.0) {
        return(false);
    }
    return(true);
}

var done thread.Event;
var lock thread.Lock;
var atomic thread.Atomic;
var counter = 0;

class Add :  thread.Runnable {
    var v1 *[*]f32;
    var v2 *[*]f32;
    var start i32;
    var stop i32;
public:
    fn mut init(v1 *[*]f32, v2 *[*]f32, start i32, stop i32) void;
}

fn Add.init(v1 *[*]f32, v2 *[*]f32, start i32, stop i32) void
{
    this.v1 = v1;
    this.v2 = v2;
    this.start = start;
    this.stop = stop;
}

fn Add.work() void
{
    for (ii in this.start : this.stop) {
        (*this.v1)[ii] += (*this.v2)[ii];
    }
    done.signal();
}

fn DoAll(v1 *[*]f32, v2 *[*]f32, count i32) i64
{
    var executers [*]*thread.Executer; 
    executers.resize(count);
    let len = v2.size() / count;
    for (ptr in executers) {
        var ex thread.Executer;
        ex.start();
        ptr = &ex;
    }
    sys.wait(1);    // be sure the threads are running !!

    let start = sys.clock();

    for (idx, ex in executers) {
        var adder Add;
        let start_idx = i32(idx) * len;
        if (i32(idx) != count - 1) {
            adder.init(v1, v2, start_idx, start_idx + len);
        } else {
            adder.init(v1, v2, start_idx, v2.size());
        }
        ex.enqueue(&adder);
    }
    for (ex in executers) {
        ex.getRunnable(true:blocking);
    }
    return(sys.clocksDiff(start, sys.clock()));
}

fn increments() void
{
    for (ii in 0:10000) {
        lock.lock();
        if (ii % 100 == 0) {
            sys.wait(1);        // to ease conflicts
        }
        ++counter;
        lock.unlock();
        atomic.inc();
    }
    done.signal();
}
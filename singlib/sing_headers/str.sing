namespace sing;

public enum SplitMode {sm_separator_left, sm_separator_right, sm_drop}

public let npos = -1;

public interface Selector {
    fn isGood(cp i32) bool;
}

public class Range {
public:
    var begin = npos;
    var end = npos;
}

// getting info
public fn len(src string) i32;
public fn numchars(src string) i32;
public fn count(src string, to_search string, insensitive bool = false) i32;

// casing
public fn toupper(src string) string;
public fn tolower(src string) string;
public fn totitle(src string) string;
public fn compare(first string, second string, insensitive bool = false) i32;
public fn compareAt(first string, at_pos i32, contained string, out end_pos i32, insensitive bool = false) i32;

// splitting
public fn split(src string, splitter string, out left string, out right string, mode SplitMode = SplitMode.sm_drop, insensitive bool = false) bool;
public fn split_any(src string, splitter string, out left string, out right string, mode SplitMode = SplitMode.sm_drop, insensitive bool = false) bool;
public fn rsplit(src string, splitter string, out left string, out right string, mode SplitMode = SplitMode.sm_drop, insensitive bool = false) bool;
public fn rsplitAny(src string, splitter string, out left string, out right string, mode SplitMode = SplitMode.sm_drop, insensitive bool = false) bool;

// replacing
public fn replace(io src string, old_sub string, new_sub string, insensitive bool = false, from i32 = 0) i32;
public fn replaceAll(io src string, old_sub string, new_sub string, insensitive bool = false) i32;

// prefix/suffix
public fn hasPrefix(src string, prefix string, insensitive bool = false) bool;
public fn hasSuffix(src string, suffix string, insensitive bool = false) bool;
public fn cutPrefix(io str string, prefix string, insensitive bool = false) void;
public fn cutSuffix(io str string, suffix string, insensitive bool = false) void;

// cleanup
public fn cutLeadingSpaces(io str string) void;
public fn cutTrailingSpaces(io str string) void;
public fn cutLeading(io str string, to_keep Selector) void;
public fn cutTrailing(io str string, to_keep Selector) void;
public fn cutFun(io str string, to_keep Selector) void;
public fn makeUtf8Compliant(io str string) void;

// working with indices
public fn find(src string, to_search string, out range Range, insensitive bool = false, from i32 = 0) bool;
public fn rfind(src string, to_search string, out range Range, insensitive bool = false, from i32 = npos) bool;
public fn findAny(src string, to_search string, out range Range, insensitive bool = false, from i32 = 0) bool;
public fn rfindAny(src string, to_search string, out range Range, insensitive bool = false, from i32 = npos) bool;
public fn findFnc(src string, matches Selector, out range Range, from i32 = 0) bool;
public fn rfindFnc(src string, matches Selector, out range Range, from i32 = npos) bool;

public fn sub(src string, first i32, last i32 = npos) string;
public fn sub_range(src string, range Range) string;
public fn pos2idx(src string, pos i32) i32;
public fn idx2pos(src string, idx i32) i32;
public fn insert(io str string, idx i32, to_insert string) void;
public fn erase(io str string, first i32, last i32 = npos) void;
public fn erase_range(io str string, range Range) void;
public fn skipFwd(str string, start i32, numchars i32) i32;
public fn skipBkw(str string, start i32, numchars i32) i32;

// unicode
public fn encode(src [*]i32) string;
public fn decode(src string, out dst [*]i32) void;
public fn decodeOne(src string, io at i32) i32;
public fn encodeOne(src i32) string;

// char classify
public fn isDigit(cc i32) bool;
public fn isXdigit(cc i32) bool;
public fn isLetter(cc i32) bool;
public fn isUpper(cc i32) bool;
public fn isLower(cc i32) bool;
public fn isTitle(cc i32) bool;
public fn isSpace(cc i32) bool;

// char case conversion
public fn ccToupper(cc i32) i32;
public fn ccTolower(cc i32) i32;
public fn ccTotitle(cc i32) i32;
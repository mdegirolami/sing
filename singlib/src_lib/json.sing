namespace sing;
requires "str";
requires "sio";

public enum TokenType {string_type, number, symbol, interpunction, comment, eol, eof}

public class Lexer {
    var codes [*]i32;
    var scan i32;

    var curline i32;
    var line_begin i32;

    var token TokenType;
    var separated bool;
    var error string;
    var string_rep string;

    // aux stuff
    var buffer[*]i32;

    fn mut parseNumber(cc i32) bool;
    fn mut parseSymbol(cc i32) bool;
    fn mut parseString() bool;
    fn mut parseComment() bool;
    fn mut skipLine() void;
public:
    fn mut init(json string) void;
    fn mut stepToNextToken() bool;

    fn getErrorString() string;
    fn mut getCurrentPosition(out row i32, out column i32) void;
    fn mut resetError() void;

    fn getTokenType() TokenType;
    fn getTokenString() string;
    fn isTokenSeparated() bool;
}

/* DOM reader/writer */
public enum JsonEntryType {number, string_type, boolean, null_type, array, object, comment}

public class JsonEntry {
public:
    var entry_type JsonEntryType;   
    var level i32;
    var string_rep string;
    var property_name string;
}

public class JsonError {
    var err string;
    var row i32;
    var col i32;
public:
    fn mut setString(val string) void;
    fn mut setPos(row i32, col i32) void;

    fn getString() string;
    fn getLocation(out row i32, out col i32) void;    
}

fn JsonError.setString(val string) void
{
    this.err = val;
}

fn JsonError.setPos(row i32, col i32) void
{
    this.row = row;
    this.col = col;
}

fn JsonError.getString() string
{
    return(this.err);
}

fn JsonError.getLocation(out row i32, out col i32) void
{
    row = this.row;
    col = this.col;
}

/* IMPLEMENTATION */
fn Lexer.init(json string) void
{
    this.codes.reserve(1000);
    this.buffer.reserve(100);
    str.decode(json, this.codes);
    this.scan = 0;
    this.separated = true;
    this.curline = 1;
    this.line_begin = 0;
}

let doubleQuoteAscii = 0x22;
let plusAscii = 0x2b;
let minusAscii = 0x2d;
let dotAscii = 0x2e;
let slashAscii = 0x2f;
let zeroAscii = 0x30;
let backslashAscii = 0x5c;
let bAscii = 0x62;
let eAscii = 0x65;
let fAscii = 0x66;
let nAscii = 0x6e;
let rAscii = 0x72;
let tAscii = 0x74;
let uAscii = 0x75;

fn Lexer.stepToNextToken() bool
{
    this.token = TokenType.eof;
    this.separated = false;
    while(this.scan < this.codes.size()) {
        let cc = this.codes[this.scan];
        this.scan++;
        if (cc == minusAscii || str.isDigit(cc)) {
            return(this.parseNumber(cc));
        } else if (str.isLetter(cc)) {
            return(this.parseSymbol(cc));
        } else if (cc == doubleQuoteAscii) {
            return(this.parseString());
        } else if (cc == slashAscii) {
            return(this.parseComment());
        } else if (cc > 32 && cc < 127) {
            this.token = TokenType.interpunction;
            this.string_rep = str.encodeOne(cc);
            return(true);
        } else if (cc == 10) {
            this.token = TokenType.eol;
            return(true);
        } else if (str.isSpace(cc) || cc == 13) {
            this.separated = true;
        } else {
            this.error = "unexpected character";
            return(false);
        }
    }
    return(true);
}

enum NumState {int_first, int_part, fract_first, fract_part, exp_sign, exp_first, exp, done}

fn Lexer.parseNumber(cc i32) bool
{
    var status = NumState.int_part;
    this.buffer.clear();
    this.buffer.push_back(cc);
    if (cc == minusAscii) {
        status = NumState.int_first;
    }
    while (this.scan < this.codes.size() && status != NumState.done) {
        let nc = this.codes[this.scan];
        this.scan++;

        // always right if not finished and not in error.
        this.buffer.push_back(nc);
        
        switch (status) {
            case NumState.int_first: {
                if (!str.isDigit(nc)) {
                    this.error = "expecting a digit";
                    return(false);
                }
                status = NumState.int_part;
            }
            case NumState.int_part: {
                if (nc == dotAscii) {
                    status = NumState.fract_first;
                } else if ((nc | 0x20) == eAscii) {
                    status = NumState.exp_sign;
                } else if (!str.isDigit(nc)) {
                    status = NumState.done;
                }
            }
            case NumState.fract_first: {
                if (str.isDigit(nc)) {
                    status = NumState.fract_part;
                } else {
                    this.error = "the first digit after the point must be a digit";
                    return(false);
                }       
            }
            case NumState.fract_part: {
                if ((nc | 0x20) == eAscii) {
                    status = NumState.exp_sign;
                } else if (!str.isDigit(nc)) {
                    status = NumState.done;
                }                
            }
            case NumState.exp_sign: {
                if (str.isDigit(nc)) {
                    status = NumState.exp;                
                } else if (nc == plusAscii) {
                    status = NumState.exp_first;
                } else if (nc == minusAscii) {
                    status = NumState.exp_first;
                } else {
                    this.error = "expecting the first exponent digit";
                    return(false);
                }                
            }
            case NumState.exp_first: {
                if (str.isDigit(nc)) {
                    status = NumState.exp;                
                } else {
                    this.error = "expecting the first exponent digit";
                    return(false);
                }                                
            }
            case NumState.exp: {
                if (!str.isDigit(nc)) {
                    status = NumState.done;
                }                                                
            }
            case NumState.done: {}
        }
    }

    // eof ?
    if (status != NumState.done) {
        this.error = "truncated number";
        return(false);
    }

    // pop terminator
    this.buffer.pop_back();
    this.scan--;

    // convert to string
    this.token = TokenType.number;
    this.buffer.push_back(0);
    this.string_rep = str.encode(this.buffer);

    return(true);
}

fn Lexer.parseSymbol(cc i32) bool
{
    this.buffer.clear();
    this.buffer.push_back(cc);
    while (this.scan < this.codes.size()) {
        let nc = this.codes[this.scan];
        if (str.isDigit(nc) || str.isLetter(nc)) {
            this.buffer.push_back(nc);
            this.scan++;
        } else {
            break;
        }
    }
    this.token = TokenType.symbol;
    this.buffer.push_back(0);
    this.string_rep = str.encode(this.buffer);
    return(true);
}

enum StrState {std, escape, xdigits, done}

fn Lexer.parseString() bool
{
    var xdigits[*]i32;
    var state = StrState.std;
    this.buffer.clear();
    while (this.scan < this.codes.size() && state != StrState.done) {
        let nc = this.codes[this.scan];
        this.scan++;

        switch (state) {
            case StrState.std: {
                if (nc == doubleQuoteAscii) {
                    state = StrState.done;
                } else if (nc == backslashAscii) {
                    state = StrState.escape;
                } else if (nc < 0x20) {
                    this.error = "control chars are unallowed in strings (pls use escape sequencies)";
                    return(false);             
                } else {
                    this.buffer.push_back(nc);
                }           
            }
            case StrState.escape: {
                state = StrState.std;
                switch (nc) {
                    case backslashAscii:
                    case doubleQuoteAscii: this.buffer.push_back(nc);                 
                    case bAscii: this.buffer.push_back(8);
                    case fAscii: this.buffer.push_back(12);
                    case nAscii: this.buffer.push_back(10);
                    case rAscii: this.buffer.push_back(13);
                    case tAscii: this.buffer.push_back(9);
                    case uAscii: {
                        state = StrState.xdigits;
                        xdigits.clear();
                        xdigits.reserve(5);
                    }
                    default: {
                        this.error = "wrong escape sequence";
                        return(false); 
                    }            
                }                               
            }
            case StrState.xdigits: {
                if (str.isXdigit(nc)) {
                    xdigits.push_back(nc);
                    if (xdigits.size() == 4) {
                        xdigits.push_back(0);

                        var value u64;
                        var last_pos i32;
                        sio.parseUnsignedHex(value, str.encode(xdigits), 0, last_pos);
                        this.buffer.push_back(i32(value));
                        state = StrState.std;
                    }
                } else {
                    this.error = "wrong escape sequence";
                    return(false); 
                }           
            }
            case StrState.done: {}
        }
    }
    this.token = TokenType.string_type;
    this.buffer.push_back(0);
    this.string_rep = str.encode(this.buffer);
    return(true);
}

fn Lexer.parseComment() bool
{
    if (this.scan >= this.codes.size() || this.codes[this.scan] != slashAscii) {
        this.error = "expecting /";
        return(false); 
    }
    ++this.scan;

    this.buffer.clear();
    this.buffer.push_back(slashAscii);
    this.buffer.push_back(slashAscii);
    while (this.scan < this.codes.size() && this.codes[this.scan] != 10) {
        if (this.codes[this.scan] > 31) {
            this.buffer.push_back(this.codes[this.scan]);
        }
        ++this.scan;
    }
    this.token = TokenType.comment;
    this.buffer.push_back(0);
    this.string_rep = str.encode(this.buffer);
    return(true);
}

fn Lexer.skipLine() void
{
    while (this.scan < this.codes.size() && this.codes[this.scan] != 10) {
        ++this.scan;
    }
    if (this.scan < this.codes.size()) {
        this.token = TokenType.eol;
        ++this.scan;
    } else {
        this.token = TokenType.eof;
    }
}

fn Lexer.getErrorString() string
{
    return(this.error);
}

fn Lexer.getCurrentPosition(out row i32, out column i32) void
{
    column = 1;
    for (idx in this.line_begin : this.scan) {
        let cc = this.codes[idx];
        if (cc == 10) {
            this.line_begin = idx + 1;
            ++this.curline;
            column = 1;
        } else if (cc == 9) {
            column += 2;
        } else if (cc >= 32) {
            column += 1;
        }
    }
    row = this.curline;
}

fn Lexer.resetError() void
{
    this.skipLine();
}

fn Lexer.getTokenType() TokenType
{
    return(this.token);
}

fn Lexer.getTokenString() string
{
    return(this.string_rep);
}

fn Lexer.isTokenSeparated() bool
{
    return(this.separated);
}

// here on: the parser
public fn parseJson(json string, out records [*]JsonEntry, out errors [*]JsonError) bool
{
    var lexer Lexer;

    lexer.init(json);
    if (!lexerAdvance(0, lexer, records, errors)) {
        return(false);
    }
    return(parseValues(0, lexer, records, errors));
}

// parses 0 or more comma separated values. the list can end with an extra comma.
fn parseValues(level i32, io lexer Lexer, out records [*]JsonEntry, out errors [*]JsonError) bool
{
    var recsize = records.size();
    while (parseSingleValue(level, lexer, records, errors)) {

        // no more values (what is next doesn't match the value syntax)
        if (recsize == records.size()) {
            return(true);
        }
        recsize = records.size();

        if (lexer.getTokenType() != TokenType.interpunction ||
            lexer.getTokenString() != ",") {
            return(true);
        }

        // there is a comma: try again
        if (!lexerAdvance(level, lexer, records, errors)) {
            return(false);
        }
    }
    return(false);
}

// parses 0 or more comma separated properties. the list can end with an extra comma.
fn parseProperties(level i32, io lexer Lexer, out records [*]JsonEntry, out errors [*]JsonError) bool
{
    var recsize = records.size();
    while (lexer.getTokenType() == TokenType.string_type) {

        // absorb property name
        let property_name = lexer.getTokenString();
        if (!lexerAdvance(level, lexer, records, errors)) {
            return(false);
        }
        
        // need a ':'
        if (lexer.getTokenType() != TokenType.interpunction ||
            lexer.getTokenString() != ":") {
            setError("expecting a ':'", lexer, errors);
            return(false);
        }
        if (!lexerAdvance(level, lexer, records, errors)) {
            return(false);
        }

        // read the value
        if (!parseSingleValue(level, lexer, records, errors)) {
            return(false);
        }

        // if we got one (we must), fix the property name
        if (recsize == records.size()) {
            setError("expecting a value", lexer, errors);
            return(false);
        } else {
            records[recsize].property_name = property_name;
            recsize = records.size();
        }

        // if a comma is not following we are done
        if (lexer.getTokenType() != TokenType.interpunction ||
            lexer.getTokenString() != ",") {
            return(true);
        }

        // there is a comma: try again
        if (!lexerAdvance(level, lexer, records, errors)) {
            return(false);
        }
    }

    // what follow is not another prop.
    return(true);
}

// returns a value, if any - you can check if a value was actually found testing the records length
fn parseSingleValue(level i32, io lexer Lexer, out records [*]JsonEntry, out errors [*]JsonError) bool
{
    // if an error occurs, return (false) from the switch
    // if there is not a value, return (true) from the switch 
    switch (lexer.getTokenType()) {
        case TokenType.number: {
            insertRecord(JsonEntryType.number, level, lexer.getTokenString(), records);
        }
        case TokenType.string_type: {
            insertRecord(JsonEntryType.string_type, level, lexer.getTokenString(), records);
        }
        case TokenType.symbol: {
            let symbol = lexer.getTokenString();
            if (symbol == "null") {
                insertRecord(JsonEntryType.null_type, level, symbol, records);
            } else if (symbol == "true" || symbol == "false") {
                insertRecord(JsonEntryType.boolean, level, symbol, records);
            } else {
                setError("unknown value", lexer, errors);
                return(false);
            }
        }
        case TokenType.interpunction: {
            let symbol = lexer.getTokenString();
            if (symbol == "[") {
                insertRecord(JsonEntryType.array, level, symbol, records);
                if (!lexerAdvance(level, lexer, records, errors)) {
                    return(false);
                }
                if (!parseValues(level + 1, lexer, records, errors)) {
                    return(false);
                }                
                if (lexer.getTokenType() != TokenType.interpunction || lexer.getTokenString() != "]") {
                    setError("expecting ']'", lexer, errors);
                    return(false);   
                }
            } else if (symbol == "{") {
                insertRecord(JsonEntryType.object, level, symbol, records);
                if (!lexerAdvance(level, lexer, records, errors)) {
                    return(false);
                }
                if (!parseProperties(level + 1, lexer, records, errors)) {
                    return(false);
                }
                if (lexer.getTokenType() != TokenType.interpunction || lexer.getTokenString() != "}") {
                    setError("expecting '}'", lexer, errors);
                    return(false);   
                }
            } else {
                return(true);
            }
        }
        default: {
            return(true);
        }
    }

    // we got a value !
    // consume the value token or ] }
    return(lexerAdvance(level, lexer, records, errors));
}

fn lexerAdvance(level i32, io lexer Lexer, out records [*]JsonEntry, out errors [*]JsonError) bool
{
    while (true) {
        if (!lexer.stepToNextToken()) {
            setError(lexer.getErrorString(), lexer, errors);
            return(false);
        } else if (lexer.getTokenType() == TokenType.comment) {
            insertRecord(JsonEntryType.comment, level, lexer.getTokenString(), records);
        } else if (lexer.getTokenType() != TokenType.eol) {
            return(true);
        }
    }
}

fn insertRecord(record_type JsonEntryType, level i32, string_rep string, out records [*]JsonEntry) void
{
    let top = records.size();
    records.resize(top + 1);
    records[top].entry_type = record_type;
    records[top].level = level;
    records[top].string_rep = string_rep;
}

fn setError(message string, io lexer Lexer, out errors [*]JsonError) void
{
    let top = errors.size();
    errors.resize(top + 1);
    var row i32;
    var col i32;
    errors[top].setString(message);
    lexer.getCurrentPosition(row, col);
    errors[top].setPos(row, col);
}

let tab_str = "    ";

// only fails if JsonEntry levels sequence is wrong
public fn writeJson(records [*]JsonEntry, out json string) bool
{
    json = "";
    var is_member [*]bool;
    is_member.reserve(50);
    is_member.push_back(false); // at level 0 records are not members of object
    for (count, record in records) {

        // if deeper than expecting (without an array/object beginning) is an error
        var curr_level = is_member.size() - 1;
        if (record.level > curr_level) {
            return(false);
        }

        // if less deep than expected, one or more obj/array are completed,
        // close them !
        while (curr_level > record.level) {
            for (idx in 0:curr_level - 1) {
                json += tab_str;
            }
            if (is_member[curr_level]) {
                json += "}";
            } else {
                json += "]";
            }
            is_member.pop_back();
            --curr_level;
            if (record.level == curr_level) {
                json += ",";
            }
            json += "\r\n";
        }

        // indent based on level
        for (idx in 0:record.level) {
            json += tab_str;
        }

        // if is a property, write the key
        if (is_member[curr_level] && record.entry_type != JsonEntryType.comment) {
            json += addEscapesAndQuotes(record.property_name) + ": ";
        }

        // write the record
        var may_need_comma = false;
        switch (record.entry_type) {
            case JsonEntryType.array: {
                json += "[";
                is_member.push_back(false);
            }
            case JsonEntryType.object: {
                json += "{";
                is_member.push_back(true);
            }
            case JsonEntryType.string_type: {
                json += addEscapesAndQuotes(record.string_rep);
                may_need_comma = true;
            }
            case JsonEntryType.comment: {
                json += record.string_rep;
            }
            default: {
                json += record.string_rep;
                may_need_comma = true;
            }
        }

        // we must terminate the line with ',' if we are at the same level of the next record
        if (may_need_comma) {

            // search the next record which is not a comment
            var level = -1;
            for (scan in i32(count) + 1 : records.size() - 1) {
                if (records[scan].entry_type != JsonEntryType.comment) {
                    level = records[scan].level;
                    break;
                }
            }
            if (level == record.level) {
                json += ",";
            }
        }
        json += "\r\n";
    }

    // close all the open objects/arrays
    for (curr_level in is_member.size() - 1:0 step -1) {
        for (idx in 0:curr_level - 1) {
            json += tab_str;
        }
        if (is_member[curr_level]) {
            json += "}\r\n";
        } else {
            json += "]\r\n";
        }
    }
    return(true);
}

fn addEscapesAndQuotes(to_fix string) string
{
    var codes [*]i32;
    var fixed = "\"";
    codes.reserve(128);
    str.decode(to_fix, codes);
    for (code in codes) {
        switch (code) {
            case 8: fixed += "\\b";
            case 9: fixed += "\\t";
            case 10: fixed += "\\n";
            case 12: fixed += "\\f";
            case 13: fixed += "\\r";
            case doubleQuoteAscii: fixed += "\\\"";
            case backslashAscii: fixed += "\\\\";
            default: if (code < 32 || code > 126) {
                fixed += "\\u" + sio.formatUnsignedHex(u64(code), 4, sio.f_zero_prefix);                
            } else {
                fixed += str.encodeOne(code);
            }
        }
    }
    fixed += "\"";
    return(fixed);
}
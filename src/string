#ifndef __STRING_H_
#define __STRING_H_

#include <stdint.h>
#include "vector.h"

namespace SingNames {

class string {
    vector<char>    _content;
public:
    static const URGH_SIZE_T npos = -1;

    // terminate on creation
    string() {_content.push_back(0);}
    string(const string &other) { _content = other._content;}
    string(const string *other) { _content = other->_content; }
    string(const char *c_str);

    const char *c_str(void) const {return(&_content[0]);}
    const char *data(void) const {return(&_content[0]);}
    URGH_SIZE_T   size(void) const {return(_content.size() - 1);}
    URGH_SIZE_T length(void) const {return(_content.size() - 1);}
    string  operator+(const string& other) const;
    string  operator+(const char *cstr) const;
    string  operator+(int cc) const;
    string& operator+=(const string& other);
	string& operator+=(const char *cstr);
	string& operator+=(int cc);
    //string& operator=(const string &other);
    //string& operator=(const char *other);
    void    operator=(const string &other);
    void    operator=(const char *other);
    string& erase(URGH_SIZE_T pos = 0, URGH_SIZE_T n = npos);
    bool    operator==(const string &other) const;
    bool    operator==(const char *cstr) const;
    bool    operator!=(const string &other) const;
    bool    operator!=(const char *cstr) const;
    const char& operator[] ( URGH_SIZE_T pos ) const {return(_content[pos]);}
    //char&   operator[] ( URGH_SIZE_T pos )       {return(_content[pos]);}     // dangerous, use setchar
    void        setchar(URGH_SIZE_T pos, int cc);
    URGH_SIZE_T find(char cc) const;
    URGH_SIZE_T rfind(char cc) const;
    string      substr(URGH_SIZE_T index, URGH_SIZE_T len) const;
    URGH_SIZE_T begin(void) const { return(0); }
    URGH_SIZE_T end(void) const { return(_content.size() - 1); }
    void        replace(const char tofind, const char towrite);
    void        toupper(void);
    URGH_SIZE_T find_from_nocase(URGH_SIZE_T first_pos, char cc) const;
    URGH_SIZE_T string_in_string_nocase(const string &tofind) const;
    void        insert(int position, const string &toinsert);
    void        insert(int position, const char *toinsert);
    void        utf8_decode(vector<int32_t> *dst) const;
    void        utf8_encode(const int32_t *codepoints, int len);
};

}
#endif

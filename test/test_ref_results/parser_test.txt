
File with namespace = UrghNames.fortest
Required fake/path/package1, package1
Required fake/path/package2, queues
Var primo {
    i32 type
}
Var secondo with initer {
    i32 type
     10
}
Var fisso read only with initer {
    string type
    " "bello"
}
Var fisso2 read only with initer {
    " "brutto"
}
Type ComplexType {
    Function Type is not pure has not varargs has 2 args {
        Var a read only is arg {
            i32 type
        }
        Var b read only is arg {
            i32 type
        }
        Pointer is const is weak {
            Array is dynamic is regular {
                Array is dynamic {
                    Array {
                         5
                        Array is dynamic {
                            Array {
                                 8
                                Array is dynamic is regular {
                                    Array {
                                        Array {
                                            Map {
                                                string type
                                                Type of name package1
                                                    Type of name ImportedType
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
Type quad {
    Type of name package1
        Type of name very
            Type of name deep
                Type of name nspace
}
Func main {
    Function Type is not pure has not varargs has 0 args {
        void type
    }
    Block {
        Var c {
            i32 type
        }
        Update with = {
             c
            Binop + Operation {
                Binop + Operation {
                     primo
                     secondo
                }
                Unop sizeof Operation {
                     c
                }
            }
        }
    }
}
Func myclass.chebello {
    Function Type is pure has varargs has 3 args {
        Var uno read only is arg {
            i32 type
        }
        Var due write only is arg {
            i8 type
        }
        Var tre is arg {
            string type
        }
        bool type
    }
    Block {
        Var size read only with initer {
            u64 type
             3
        }
        Var mm with initer {
            Array {
                 3
                Array {
                     size
                    f32 type
                }
            }
            Initer {
                Initer {
                     1.0
                     2.5
                     3
                }
                Initer {
                     3
                }
                Initer {
                     3
                }
            }
        }
        Update with = {
            Indexing {
                 0
                Missing upper value
                Indexing {
                     0
                    Missing upper value
                     mm
                }
            }
            Binop + Operation {
                Indexing {
                     1
                    Missing upper value
                    Indexing {
                         0
                        Missing upper value
                         mm
                    }
                }
                Indexing {
                     2
                    Missing upper value
                    Indexing {
                         0
                        Missing upper value
                         mm
                    }
                }
            }
        }
        Update with = {
            Indexing {
                 1
                Missing upper value
                Indexing {
                     0
                    Missing upper value
                     mm
                }
            }
            Binop - Operation {
                Indexing {
                     1
                    Missing upper value
                    Indexing {
                         0
                        Missing upper value
                         mm
                    }
                }
                Indexing {
                     2
                    Missing upper value
                    Indexing {
                         0
                        Missing upper value
                         mm
                    }
                }
            }
        }
        Update with += {
            Indexing {
                 0
                Missing upper value
                Indexing {
                     0
                    Missing upper value
                     mm
                }
            }
             3
        }
        Var pippo {
            f32 type
        }
        ++ Operation {
             pippo
        }
        ++ Operation {
             pippo
        }
        -- Operation {
             pippo
        }
        -- Operation {
             pippo
        }
        Function Call {
            Argument  {
                 3
            }
            Argument  {
                 pippo
            }
             fun_to_call
        }
        While {
            Binop > Operation {
                 pippo
                 0
            }
            Block {
                -- Operation {
                     pippo
                }
            }
        }
        If {
            Binop > Operation {
                 pippo
                 10
            }
            Block {
                Update with *= {
                     pippo
                     2
                }
            }
            Binop > Operation {
                 pippo
                 5
            }
            Block {
                Update with += {
                     pippo
                     3
                }
            }
            Block {
                Update with = {
                     pippo
                     0
                }
            }
        }
        For {
            Var it is for iterator {
            }
            Indexing {
                 0
                Missing upper value
                 mm
            }
            Block {
                Update with = {
                     it
                     pippo
                }
            }
        }
        For {
            Var index read only is for index {
            }
            Var it is for iterator {
            }
            Indexing {
                 1
                Missing upper value
                 mm
            }
            Block {
                Update with = {
                     it
                     index
                }
            }
        }
        For {
            Var index read only is for iterator {
            }
             0
            Binop - Operation {
                 size
                 1
            }
            Block {
                If {
                    Binop == Operation {
                        Indexing {
                             index
                            Missing upper value
                            Indexing {
                                 0
                                Missing upper value
                                 mm
                            }
                        }
                         0
                    }
                    Block {
                        Statement continue
                    }
                }
                Update with = {
                    Indexing {
                         index
                        Missing upper value
                        Indexing {
                             0
                            Missing upper value
                             mm
                        }
                    }
                     0
                }
            }
        }
        For {
            Var index read only is for iterator {
            }
             0
            Binop - Operation {
                 size
                 1
            }
             2
            Block {
                If {
                    Binop == Operation {
                        Indexing {
                             index
                            Missing upper value
                            Indexing {
                                 0
                                Missing upper value
                                 mm
                            }
                        }
                         0
                    }
                    Block {
                        Statement break
                    }
                }
                Update with = {
                    Indexing {
                         index
                        Missing upper value
                        Indexing {
                             0
                            Missing upper value
                             mm
                        }
                    }
                     0
                }
            }
        }
        Block {
            Var inner with initer {
                string type
                " "is inner !!"
            }
            Var a {
                f32 type
            }
            Update with = {
                Binop . Operation {
                     myclass
                     member
                }
                 10
            }
            Update with = {
                 a
                Binop + Operation {
                     pippo
                    Binop / Operation {
                        Binop * Operation {
                             10
                            Binop + Operation {
                                Indexing {
                                     1
                                    Missing upper value
                                    Indexing {
                                         1
                                        Missing upper value
                                         mm
                                    }
                                }
                                Binop . Operation {
                                     package1
                                     extvar
                                }
                            }
                        }
                        Binop . Operation {
                             myclass
                             member
                        }
                    }
                }
            }
            Update with = {
                Unop * Operation {
                    Function Call {
                        Argument singlepar {
                             a
                        }
                         returning_pointer
                    }
                }
                Binop + Operation {
                    Binop + Operation {
                        Binop + Operation {
                            Unop sizeof Operation {
                            }
                            Unop dimof Operation {
                                Indexing {
                                     0
                                    Missing upper value
                                     mm
                                }
                            }
                        }
                        Unop u64 Operation {
                             pippo
                        }
                    }
                    Unop - Operation {
                         a
                    }
                }
            }
            Var test with initer {
                Binop || Operation {
                    Binop && Operation {
                        Binop > Operation {
                            Binop + Operation {
                                Binop * Operation {
                                    Binop ^ Operation {
                                         pippo
                                         3
                                    }
                                     2
                                }
                                Binop * Operation {
                                    Binop ^ Operation {
                                         pippo
                                         2
                                    }
                                     5
                                }
                            }
                             3
                        }
                        Binop < Operation {
                             pippo
                             0
                        }
                    }
                    Binop > Operation {
                         pippo
                         100
                    }
                }
            }
            Update with = {
                 test
                Binop || Operation {
                     test
                    Binop && Operation {
                        Binop . Operation {
                             myclass
                             thebool
                        }
                        Binop < Operation {
                             10
                            Binop + Operation {
                                 pippo
                                Binop * Operation {
                                    Indexing {
                                         0
                                        Missing upper value
                                        Indexing {
                                             0
                                            Missing upper value
                                             mm
                                        }
                                    }
                                    Binop ^ Operation {
                                         5
                                         2
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Update with = {
                 a
                Unop i8 Operation {
                     40
                }
            }
            Update with = {
                 a
                Unop i32 Operation {
                    Binop * Operation {
                         40
                         3
                    }
                }
            }
            Update with = {
                 a
                Unop i32 Operation {
                    Binop + Operation {
                         40
                         3
                    }
                }
            }
            Update with = {
                 a
                Unop c128 Operation {
                    Binop + Operation {
                         40
                        Unop ~ Operation {
                             3
                        }
                    }
                }
            }
            Update with = {
                 a
                Unop c128 Operation {
                    Binop + Operation {
                         12
                         13
                    }
                }
            }
            Update with = {
                 a
                Unop i64 Operation {
                     a
                }
            }
            Update with = {
                 a
                c128 int 12 13i
            }
            Update with = {
                 a
                c64  -16.0 1.0i
            }
            Update with = {
                 a
                c128  0.0 1.0i
            }
            Update with = {
                 a
                i64 int -13
            }
        }
        Return {
            true 
        }
    }
}
Func varargs_func {
    Function Type is not pure has varargs has 0 args {
        void type
    }
    Block {
    }
}
Func defs_func {
    Function Type is not pure has not varargs has 1 args {
        Var xxx read only is arg with initer {
            i32 type
             3
        }
        void type
    }
    Block {
        Switch cases = 3 {
            Binop + Operation {
                 a
                Binop * Operation {
                     3
                     bb
                }
            }
             0
            ++ Operation {
                 counter
            }
             1
            -- Operation {
                 counter
            }
            else case:
            Return {
            }
        }
        TypeSwitch cases = 3 {
            Var v {
            }
             base
            Type of name derived1
            ++ Operation {
                 v
            }
            Type of name far
                Type of name derived2
            -- Operation {
                 v
            }
            else case:
            Return {
            }
        }
        Switch cases = 1 {
             v
            else case:
        }
        Update with = {
            Binop . Operation {
                this 
                 member
            }
             0
        }
    }
}
Var contint read only with initer {
     10
}
Type tenum {
    Enumeration {
        case = ID_0
        case = ID_1
         5
        case = ID_2
        Binop * Operation {
             constint
             2
        }
        case = ID_3
        case = ID_4
    }
}
Type test_if {
    Interface, members = 2, ancestors = 1 {
        Func fun1 {
            Function Type is not pure has not varargs has 1 args {
                Var aa read only is arg {
                    string type
                }
                void type
            }
        }
        Func fun2 muting {
            Function Type is not pure has not varargs has 1 args {
                Var kk write only is arg {
                    f32 type
                }
                bool type
            }
        }
        Type of name far
            Type of name base
    }
}
Type the_class {
    Class, members(var/fn/if) = 3, 3, 2 {
        Var core {
            Type of name far
                Type of name if2_implementor
        }
        Var member1 with initer {
            Array {
                 10
                i64 type
            }
            Initer {
                 3
                 4
                 5
                 0
            }
        }
        Var member2 with initer {
            Array {
                 10
                i64 type
            }
            Initer {
                 3
                 4
                 5
                 0
            }
        }
        Func InsertJob muting {
            Function Type is not pure has not varargs has 1 args {
                Var job read only is arg {
                    Pointer   {
                        Type of name Job
                    }
                }
                void type
            }
        }
        Func fun4 {
        } implemented by: core
        Func fun3 {
            Function Type is not pure has not varargs has 1 args {
                Var aa read only is arg {
                    c128 type
                }
                void type
            }
        }
        Type of name test_if
        Type of name if2 implemented by: core
    }
}
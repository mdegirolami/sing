
namespace UrghNames.fortest;
requires "fake/path/package1";
requires "fake/path/package2", queues;

public var primo i32;
var secondo i32 = 10;
let fisso string = "bello";
let fisso2 = "brutto";
type ComplexType (in a i32, in b i32) const weak *[*,*][5,*][8][*,][]map(string) package1.ImportedType;
public type quad package1.very.deep.nspace;

fn main() void
{
    var c i32;
    c = primo + secondo + sizeof(c);
    //let a = 3;
    //let b = 10;
}

fn myclass.chebello pure(in uno i32, out due i8, io tre string, ...) bool
{
	let size u64 = 3;
	var mm[3][size] f32 = {{1.0, 2.5, 3}, {3}, {3}};
	
	mm[0][0] = mm[0][1] + mm[0][2];
	mm[0][1] = mm[0][1] - mm[0][2];
	mm[0][0] += 3;
	var pippo f32;
	++pippo;
	pippo++;
	pippo--;
	--pippo;
	fun_to_call(3, pippo);
	while (pippo > 0) {
		--pippo;
	}
	if (pippo > 10) {
		pippo *= 2;
	} else if (pippo > 5) {
		pippo += 3;
	} else {
		pippo = 0;
	}
	for (it in mm[0]) {
		it = pippo;
	}
	for (index, it in mm[1]) {
		it = index;
	}
	for (index in 0 : size-1) {
		if (mm[0][index] == 0) {
			continue;
		}
		mm[0][index] = 0;
	}
	for (index in 0 : size - 1 step 2) {
		if (mm[0][index] == 0) {
			break;
		}
		mm[0][index] = 0;
	}
	{
		var inner string = "is inner !!";
		var a f32;
		myclass.member = 10;
		a = pippo + 10 * (mm[1,1] + package1.extvar) / myclass.member;
		*returning_pointer(a : singlepar) = sizeof(f32) + u64(pippo) + -a;
		var test = pippo**3 * 2 + pippo**2 * 5 > 3 && pippo < 0 || pippo > 100;
		test = test || myclass.thebool && 10 < pippo + mm[0][0] * 5**2;
        
        // recognizing the fake casts : not fake
        a = i8(40);
        a = i32(40 * 3);
        a = i32(40 + 3);
        a = c128(40 + ~3);
        a = c128(12 + 13);
        a = i64(a);
        
        // fake
        a = c128(12 + 13i);
        a = c64(1.0i - 16.0);
        a = c128(1.0i);
        a = i64(-13);      
	}
	return(true);
}

fn varargs_func (...) void {
}

public fn defs_func (in xxx i32 = 3) void {
    switch (a + 3*bb) {
        case 0 : ++counter;
        case 1 : --counter;
        default : return;
    }
    typeswitch(v = base) {
        case derived1     : ++v;
        case far.derived2 : --v;
        default : return;
    }
    switch (v) {
        default :      // default is explicitly empty
    }
    this.member = 0;
}

let contint = 10;

enum tenum {ID_0, ID_1 = 5, ID_2 = constint * 2, ID_3, ID_4}

interface test_if : far.base {
    fn fun1(in aa string) void;
    fn mut fun2(out kk f32) bool;
}

class the_class : test_if, if2 by core {    
public:    
    var core far.if2_implementor;
    var member1 [10]i64 = {3, 4, 5, 0};
    
    fn mut InsertJob(in job *Job) void;    
    fn fun4 by core;

private:
    var member2 [10]i64 = {3, 4, 5, 0};
    fn fun3(in aa c128) void;
}
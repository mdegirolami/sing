public fn print_primes_to(in top i32) void
{
	var primes[*]i32;
	var primes_count i32 = 0;
	
    // note: for all the numbers in the range excluing even numbers
	for (totry in 3:top step 2) {
        let max_val = i32(uint32_sqrt(u32(totry))); // max divisor who need to check
        var isprime = true;
        for (value in primes) {
            if (value > max_val) {
                break;
            }
            if (totry % value == 0) {
                isprime = false;
				break;
			}
		}
		if (isprime) {
			primes[primes_count] = totry;
			primes_count++;
			// print(totry);
		}
	}
}

// bisection
fn uint32_sqrt(in x u32) u32 {
    var res u32 = 0;
    var add u32 = 0x8000;   
    for(ii in 0:16)
    {
        let temp = res | add;
        if (x >= temp * temp) {
            res = temp;           
        }
        add >>= 1;
    }
    return(res);
}

/*
fn SquareRoot(in x u32) u16
{
    var op = x;
    var res u32 = 0;
    var one u32 = 1 << 30; // The second-to-top bit is set: use 1u << 14 for uint16_t type; use 1uL<<30 for uint32_t type

    // "one" starts at the highest power of four <= than the argument.
    while (one > op)
    {
        one >>= 2;
    }

    while (one != 0)
    {
        if (op >= res + one)
        {
            op = op - (res + one);
            res = res +  u32(2) * one;
        }
        res >>= 1;
        one >>= 2;
    }
    return(u16(res));
}
*/

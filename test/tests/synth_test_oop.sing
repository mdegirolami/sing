namespace sinth_test_oop;

// has constructor, destructor, private stuff
public class stat {
public:
    fn mut finalize() void;

    fn mut add(in value f32) void;
    fn getall(out avg f32, out variance f32) bool;

    var count i32;
private:
    fn avg() f32;
    fn variance() f32;

    var sum f32;
    var sum2 f32;
}

// some interfaces
public enum result {ok = 1, ko}

public interface tester {
    fn isgood() result;
} 

public interface tough_tester : tester {
    fn mut tough_test(in enable bool) void;
}

// has virtual destructor, interface (support for typeswitch)
public class c0_test : tough_tester {
public:
    fn mut finalize() void;
    fn mut init() void;
private:
    var message string;
    var istough bool;
}

// testing 'by'
public class delegating : tough_tester by implementor {
public:
    fn init by implementor;
    var p1 weak*delegating;
    var p2 weak*delegating;
private:
    var implementor c0_test;    
}

// very simple: NO costructor/destructor/private stuff/inheritance
public class simple {
public:
    var xxx string;
}

//
// STAT class
//
fn stat.finalize() void
{
    this.count = 0;
}

fn stat.add(in value f32) void
{
    this.count++;
    this.sum += value;
    this.sum2 += value * value; 
}

fn stat.getall(out avg f32, out variance f32) bool
{
    avg = this.avg();
    variance = this.variance();
    return(true);
}

fn stat.avg() f32
{
    if (this.count == 0) {
        return(0);
    } else {
        return(this.sum/f32(this.count));
    }
}

fn stat.variance() f32
{
    if (this.count == 0) {
        return(0);
    } else {
        let avg = this.avg();
        return(this.sum2/f32(this.count) - avg * avg);
    }
}

//
// c0_test
//
fn c0_test.finalize() void
{
    this.message = "uninited";
}

fn c0_test.init() void
{
    this.message = "inited";
}

fn c0_test.tough_test(in enable bool) void
{
    this.istough = enable;
}

fn c0_test.isgood() result
{
    if (this.istough) {
        return(result.ok);
    }
    return(result.ko);
}

public fn test_oop() *delegating
{
    var v_stat stat;
    var avg f32;
    var variance f32;
    
    // direct access
    v_stat.add(5);
    v_stat.add(10);
    v_stat.getall(avg, variance);

    var t_instance delegating;
    let t_p *tester = &t_instance;

    // access through interface, switch integer constant
    switch (t_p.isgood()) {
        case result.ok: avg *= 2.0;
        case result.ko: avg *= 0.5;
    }

    switch(9) {
        case 9: {
            v_stat.add(3.0);
            v_stat.add(6.0);
        }
        default: return(null);
    }

    // access through pointer
    let t_p2 = &t_instance;
    t_p2.tough_test(true);

    let alternate c0_test;

    // weak pointers assignments
    var dd delegating;
    dd.p1 = &t_instance;
    dd.p2 = t_p2;
    dd.p1 = null;
    dd.p1 = dd.p2;

    check_typeswitch(alternate);
    check_typeswitch2(t_p);

    check_builtin();

    // legal uses of a weak pointer
    var t_p3 *delegating = dd.p1;
    t_p3 = dd.p2;
    receives_ptr(dd.p2);
    var test map(*delegating)i32;
    test.insert(dd.p2, 89);
    return(dd.p1);
}

fn receives_ptr(v0 *delegating) void
{
}

fn check_typeswitch(in object tester) i32
{
    typeswitch(ref = object) {
        case c0_test: return(0);     // must select this
        case delegating: 
            if (ref.isgood() == result.ok) {

                // before return1
                return(1);
            }
        default: return(2);
    }
    return(-1);
}

fn check_typeswitch2(in object *tester) i32
{
    var tmp *delegating;
    typeswitch(ref = object) {
        case *c0_test: {
            ref.tough_test(true);
            return(0);
        }
        case *delegating: tmp = ref; // must select this
        default: return(2);
    } 
    return(-1);   
}

type maptype map(string)i32;

fn check_builtin() void
{
    var sign i32;
    let atan = 5;       // conflicts with functions ?
    var int8 i8 = -100;
    int8 = int8.abs();
    int8 = int8.sqrt();
    sign = int8.sgn();

    var int32 i32 = -100;
    int32 = int32.abs();
    int32 = int32.sqrt();
    sign = int32.sgn();

    var uint64 u64 = 10000;
    uint64 = uint64.abs();
    uint64 = uint64.sqrt();
    sign = uint64.sgn();

    var f0 = -10000.0;
    f0 = f0.abs();
    f0 = f0.sqrt();
    sign = f0.sgn();
    f0 = f0.sin();
    f0 = f0.cos();
    f0 = f0.tan();
    f0 = 0.5;
    f0 = f0.asin();
    f0 = f0.acos();
    f0 = f0.atan();
    f0 = f0.log();
    f0 = f0.exp();
    f0 = f0.log2();
    f0 = f0.exp2();
    f0 = f0.log10();
    f0 = f0.exp10();
    f0 = f0.floor();
    f0 = (0.3).ceil();
    f0 = (-0.3).round();
    f0 = (-0.7).round();

    var f1 = f64(-10000.0);
    f1 = f1.abs();
    f1 = f1.sqrt();
    sign = f1.sgn();
    f1 = f1.sin();
    f1 = f1.cos();
    f1 = f1.tan();
    f1 = 0.5;
    f1 = f1.asin();
    f1 = f1.acos();
    f1 = f1.atan();
    f1 = f1.log();
    f1 = f1.exp();
    f1 = f1.log2();
    f1 = f1.exp2();
    f1 = f1.log10();
    f1 = f1.exp10();
    f1 = f1.floor();
    f1 = f64(0.3).ceil();
    f1 = f64(-0.3).round();
    f1 = f64(-0.7).round();

    var cpl c64 = -1.0 + 1i;
    f0 = cpl.abs();
    f0 = cpl.arg();
    f0 = cpl.imag();
    f0 = cpl.real();
    f0 = cpl.norm();
    cpl = cpl.sqrt();
    cpl = cpl.sin();
    cpl = cpl.cos();
    cpl = cpl.tan();
    cpl = 1i;
    cpl = cpl.asin();
    cpl = cpl.acos();
    cpl = cpl.atan();
    cpl = cpl.log();
    cpl = cpl.exp();

    var aa [*]f32 = {1, 2, 3};
    aa.reserve(100);
    var cc = aa.capacity();
    var ss = aa.size();
    aa.shrink_to_fit(); 
    cc = aa.capacity();
    ss = aa.size();
    aa.resize(10);
    cc = aa.capacity();
    ss = aa.size();
    aa.clear();
    cc = aa.capacity();
    ss = aa.size();
    var isempty = aa.empty();
    aa.push_back(5);
    aa.push_back(6);
    aa.pop_back();
    aa.insert(0, 5, 10:element);
    aa.erase(1,4);
    var tt = aa;
    aa.insert_v(1, tt);
    aa.append(tt);

    var bb [*]f32 = {1, 2, 3};
    let bbp = &bb;
    bbp.push_back(1); 
    ss = bb.size();

    // built-in on static vectors
    var sv [3]string;
    ss = sv.size();

    // map constructors
    var map1 maptype;
    var map2 maptype = {"one", 1, "two", 2, "three", 3};
    var map3 = map1;
    var map4 maptype = {"one", 1, "two", 2, "three", 3};    // on heap with initializzation !
    let mapp = &map4;

    map1.reserve(100);
    int32 = map1.capacity();
    map1.insert("first", 10101);
    map1.insert("second", 89);
    map1.shrink_to_fit();
    int32 = map1.capacity();
    int32 = map1.size();
    var test bool = map1.isempty();
    map1.clear();
    int32 = map1.size();
    test = map1.isempty();
    map2.erase("two");
    int32 = map2.get("one");
    int32 = map2.get_safe("one", -1);
    int32 = map2.get_safe("two", -1);
    test = map2.has("one");
    test = map2.has("two");
    var ts string = map2.key_at(1);
    int32 = map2.value_at(1);
}

// how to implement inheritance
public interface if1 {
    fn uno(a i32, b i32) void;
    fn due(a i32, b i32) void;    
}

public interface if2 {
    fn uno(a i32, b i32) void;
    fn tre(a f32, b i32) void;    
}

public class Concrete: if1, if2 {
public:
}

fn Concrete.uno(a i32, b i32) void
{
}

fn Concrete.due(a i32, b i32) void
{
}

fn Concrete.tre(a f32, b i32) void
{
}

public let xxx Concrete; 

public class Derived: if1, if2
{
    var embedded Concrete; 
public:    
    fn uno by embedded;
    fn due by embedded;
}

fn Derived.tre(a f32, b i32) void
{
}

public let xxy Derived; 



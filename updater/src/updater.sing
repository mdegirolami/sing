requires "sio";
requires "sys";
requires "str";
requires "json";
requires "buildupd";

public fn updater(argv [*]string) i32
{
    // check args
    if (argv.size() < 3) {
        sio.print("\r\nUsage: updater <project_path> <sdk path>\r\n");
        return(0);
    }

    // take out '/' from the end of the string, if present. Normalize.
    let root = sio.pathFix(argv[1]); 
    let sdk = sio.pathFix(argv[2]);
    let default_target = getDefaultTarget(root);

    // collect sources
    var sources [*]buildupd.Source;
    collectSources(root, sources);

    // if there are no sources, init with hello_world
    if (sources.size() < 1) {
        if (!copyFolderFromSdk(sdk, root, "sing") || !copyFolderFromSdk(sdk, root, "src")) {
            sio.print("\r\nError, Can't copy sources to the project directory !!");
            return(0);
        }
        collectSources(root, sources);
    }

    // if the build directory doesn't exist, let's create one
    var nfo sio.FileInfo;
    if (sio.fileGetInfo(root + "/build", nfo) != 0 || !nfo.is_dir) {
        if (!copyFolderFromSdk(sdk, root, "build")) {
            sio.print("\r\nError, Can't copy build files to the project directory !!");
            return(0);
        }
    }

    // update sdk_location.ninja
    let sdkfile = root + "/build/sdk_location.ninja";
    var sdkfile_ok = false;
    var sdkfile_content string; 
    if (sio.fileReadText(root + "/build/sdk_location.ninja", sdkfile_content) == 0) {
        var discard string;
        if (str.split(sdkfile_content, "=", discard, sdkfile_content)) {
            str.cutLeadingSpaces(sdkfile_content);
            _ = str.splitAny(sdkfile_content, " \t\r\n", sdkfile_content, discard);
            if (sio.fileGetInfo(sdkfile_content, nfo) == 0 && nfo.is_dir) {
                sdkfile_ok = true;
            }            
        }
    }
    if (!sdkfile_ok) {
        sdkfile_content = "sdk = " + sdk + "\r\n";
        if (sio.fileWriteText(sdkfile, sdkfile_content) != 0) {
            sio.print("\r\nError, Can't write sdk_location.ninja !!");
            return(0);        
        }
    }

    // set the default target name into build files (replacing "<PHOLD>")
    replace_PHOLD(root + "/build/build_linux_debug.ninja", default_target, false:forwin, true:debug);
    replace_PHOLD(root + "/build/build_linux_release.ninja", default_target, false:forwin, false:debug);
    replace_PHOLD(root + "/build/build_win_debug.ninja", default_target, true:forwin, true:debug);
    replace_PHOLD(root + "/build/build_win_release.ninja", default_target, true:forwin, false:debug);

    // build index and check duplications
    var path1 string;
    var path2 string;
    var srcbase2idx map(string)i32;
    if (areThereDuplications(path1 ,path2, sources, srcbase2idx)) {
        sio.print("\r\nError, Base filenames must be unique !! Conflict between\r\n" + path1 + " and\r\n" + path2);
        return(0);        
    }

    // update build_aux.ninja
    var has_mods bool;
    let result = buildupd.fixBuild(has_mods, root + "/build/build_aux.ninja", sources, srcbase2idx);
    if (result != "") {
        sio.print("\r\nError, /build/build_aux.ninja, " + result);
        return(0);        
    }

    // sources changed. clean up temporary files
    if (has_mods) {
        _ = sio.dirRemove(root + "/out", true:if_not_empty);
        _ = sio.dirRemove(root + "/build/obj_d", true:if_not_empty);
        _ = sio.dirRemove(root + "/build/obj_r", true:if_not_empty);
    }

    // create required directories
    if (0 != sio.dirCreate(root + "/build/obj_d") || 
        0 != sio.dirCreate(root + "/build/obj_r") ||  
        0 != sio.dirCreate(root + "/bin/linux") ||  
        0 != sio.dirCreate(root + "/bin/win")) {
        sio.print("\r\nError, Can't create working directories in project root !!");
        return(0);
    }  

    // create temporary directories for sing generated c files
    var paths map(string)i32;
    for (src in sources) {
        if (src.ext == "sing") {
            paths.insert(src.path, 0);
        }
    }
    for (idx in 0:paths.size()) {
        if (sio.dirCreate(root + "/out/debug/" + paths.key_at(idx)) != 0 ||  
            sio.dirCreate(root + "/out/release/" + paths.key_at(idx)) != 0) {
            sio.print("\r\nError, Can't create the cpp intermediate directories out/debug and out/release in project root !!");
            return(0);
        }
    }

    // create and fill .vscode if not existent
    if (sio.fileGetInfo(root + "/.vscode", nfo) != 0 || !nfo.is_dir) {
        if (!copyFolderFromSdk(sdk, root, ".vscode")) {
            sio.print("\r\nError, Can't copy .vscode files to the project directory !!");
            return(0);
        }
    }

    // fix .vscode/launch.json
    if (!fixLaunchFile(root, default_target)) {
        sio.print("\r\nError, Can't update .vscode/launch.json !!");
        return(0);
    }

    // patch c_cpp_poperties.json with the sing include files
    if (!addSingLibraryToCppIntellisense(root, sdk)) {
        sio.print("\r\nError, Can't update .vscode/c_cpp_properties.json !!");
        return(0);
    }

    // create sing_sense.txt if it doesn't exist
    if (sio.fileGetInfo(root + "/.vscode/sing_sense.txt", nfo) != 0) {
        let err = sio.fileWriteText(root + "/.vscode/sing_sense.txt", "sing\r\n");
        if (err != 0) {
            sio.print("\r\nError, Can't write sing_sense.txt");
            return(0);
        }
    }

    // create .gitignore if it doesn't exist
    if (sio.fileGetInfo(root + "/.gitignore", nfo) != 0) {
        let err = sio.fileWriteText(root + "/.gitignore", "bin/*\r\n"
                                                          "build/obj*\r\n"
                                                          "out/*\r\n");
        if (err != 0) {
            sio.print("\r\nError, Can't write .gitignore");
            return(0);
        }
    }

    sio.print("\r\nAll done...");
    return(0);
}

fn collectSources(root string, out buffer [*]buildupd.Source) void
{
    scanDirForSources(root + "/sing", buffer);
    scanDirForSources(root + "/src", buffer);
}

fn scanDirForSources(srcdir string, out buffer [*]buildupd.Source) void
{
    var tmp [*]string;

    _ = sio.dirReadNames(srcdir, sio.DirFilter.regular, tmp, true:recursive);
    for (name in tmp) {
        if (str.hasSuffix(name, ".sing", true:insensitive) ||
            str.hasSuffix(name, ".cpp", true:insensitive)) {
            str.cutPrefix(name, srcdir);
            str.cutPrefix(name, "/");
            var src buildupd.Source;
            var drive string;
            sio.pathSplit(name, drive, src.path, src.base, src.ext);
            buffer.push_back(src);
        }
    }
}

fn copyFolderFromSdk(sdk string, root string, folder string) bool
{
    // source and dst directories
    let source = sdk + "/template/" + folder;
    let dst = root + "/" + folder;

    // read the files list
    var tocopy [*]string;
    if (sio.dirReadNames(source, sio.DirFilter.regular, tocopy, false:recursive) != 0) {
        return(false);
    }

    // be sure the destination directory exists
    if (sio.dirCreate(dst) != 0) {
        return(false);
    }

    // for every file in source dir..
    var dstfile string;
    var buffer [*]u8;
    for (srcfile in tocopy) {
        dstfile = srcfile;
        str.cutPrefix(dstfile, source, false:insensitive);
        buffer.clear();
        if (sio.fileRead(srcfile, buffer) != 0) {
            return(false);
        }
        if (sio.fileWrite(dst + dstfile, buffer) != 0) {
            return(false);
        }
    }

    return(true);
}

fn areThereDuplications(out path1 string, out path2 string, 
                        all_srcs [*]buildupd.Source, out base2idx map(string)i32) bool
{
    for (count, src in all_srcs) {
        if (base2idx.has(src.base)) {
            path1 = all_srcs[base2idx.get(src.base)].getFullName();
            path2 = src.getFullName();
            return(true);
        }
        base2idx.insert(src.base, i32(count));
    }
    return(false);
}

fn getDefaultTarget(root string) string
{
    var last string;
    var discard string;
    if (!str.rsplitAny(root, "/\\", discard, last)) {
        return(root);
    }
    return(last);
}

fn replace_PHOLD(name string, default_target string, forwin bool, debug bool) void
{
    var buffer string;
    if (sio.fileReadText(name, buffer) == 0) {
        var target = default_target;
        if (debug) {
            target += "_d";
        }
        if (forwin) {
            target += ".exe";
        }
        if (str.replace(buffer, "<PHOLD>", target) != str.npos) {
            if (sio.fileWriteText(name, buffer) != 0) {
                sio.print("\r\nCan't write " + name);
            }
        }
    }
}

fn addSingLibraryToCppIntellisense(root string, sdk string) bool
{
    // read the file
    var content string;
    let filname = root + "/.vscode/c_cpp_properties.json";
    if (sio.fileReadText(filname, content) != 0) {
        return(true);
    }

    // parse the json content
    var entries [*]json.JsonEntry;
    var errors [*]json.JsonError;
    if (!json.parseJson(content, entries, errors)) {
        return(false);
    }

    // check the content            
    let inclusion = sdk + "/inc";
    var scan = 0;
    while (scan < entries.size()) {

        if (entries[scan].entry_type == json.JsonEntryType.string_type && 
            entries[scan].property_name == "name" && cfgIsForAnotherPlatform(entries[scan].string_rep)) {

            // discard blocks that are meant for another platform
            let array_level = entries[scan].level;
            ++scan;
            while (scan < entries.size() && entries[scan].level > array_level) {
                ++scan;
            }        
        } else if (entries[scan].entry_type == json.JsonEntryType.array && entries[scan].property_name == "includePath") {

            // we found the paths array, let's scan it            
            let array_level = entries[scan].level;
            ++scan;
            var found = false;
            while (scan < entries.size() && entries[scan].level > array_level) {
                if (entries[scan].entry_type == json.JsonEntryType.string_type &&
                    entries[scan].level == array_level + 1 &&
                    str.hasSuffix(entries[scan].string_rep, "/sdk/inc")) {
                    var range str.Range;
                    if (str.find(entries[scan].string_rep, "vscode-sing", range)) {
                        if (found) {

                            // is a duplicate: delete !
                            entries.erase(scan, scan + 1);
                            --scan; // compensate the future increment
                        } else {
                            found = true;
                            if (entries[scan].string_rep != inclusion) {

                                // if there is a wrong path replace it
                                entries[scan].string_rep = inclusion;
                            }
                        }
                    }
                }
                ++scan;
            }

            // there is none, add it !
            if (!found) {
                var incentry json.JsonEntry;

                incentry.entry_type = json.JsonEntryType.string_type;
                incentry.level = array_level + 1;
                incentry.string_rep = inclusion;
                entries.insert(scan, 1, incentry);
            }
        } else {
            ++scan;
        }
    }

    // write back the updated json
    if (!json.writeJson(entries, content)) {
        return(false);
    }
    if (sio.fileWriteText(filname, content) != 0) {
        return(false);
    }
    return(true);
}

fn cfgIsForAnotherPlatform(name string) bool
{
    if (name == "Linux") {
        return(sys.getOs() != sys.OsId.linux);
    } else if (name == "Mac") {
        return(sys.getOs() != sys.OsId.osx);
    } else if (name == "Win32") {
        return(sys.getOs() != sys.OsId.win);
    }
    return(false);
}

fn fixLaunchFile(root string, default_target string) bool
{
    var to_launch = default_target + "_d";
    var original string;
    if (sio.fileReadText(root + "/.vscode/launch.json", original) != 0) {
        return(true);
    }

    var buffer = original;
    let id = sys.getOs();
    switch (id) {
        case sys.OsId.linux: {
            _ = str.replaceAll(buffer, "/win", "/linux");
            _ = str.replaceAll(buffer, "/osx", "/linux");
            _ = str.replace(buffer, ".exe", "");
            _ = str.replace(buffer, "<PHOLD>", to_launch);
        }
        case sys.OsId.osx: {
            _ = str.replaceAll(buffer, "/win", "/osx");
            _ = str.replaceAll(buffer, "/linux", "/osx");
            _ = str.replace(buffer, ".exe", "");
            _ = str.replace(buffer, "<PHOLD>", to_launch);
        }
        case sys.OsId.win: {
            to_launch += ".exe";
            _ = str.replaceAll(buffer, "/linux", "/win");
            _ = str.replaceAll(buffer, "/osx", "/win");
            if (str.replace(buffer, "<PHOLD>", to_launch) == str.npos) {
                if (!addExeToProgram(buffer)) {
                    return(false);
                }
            }
        }
    }

    if (buffer != original) {
        if (sio.fileWriteText(root + "/.vscode/launch.json", buffer) != 0) {
            return(false);
        }
    }
    return(true);
}

fn addExeToProgram(io buffer string) bool
{
    // parse the json content
    var entries [*]json.JsonEntry;
    var errors [*]json.JsonError;
    if (!json.parseJson(buffer, entries, errors)) {
        return(false);
    }

    var changed = false;
    for (record in entries) {
        if (record.entry_type == json.JsonEntryType.string_type && record.property_name == "program") {
            if (!str.hasSuffix(record.string_rep, ".exe", true:insensitive)) {
                sio.pathSetExtension(record.string_rep, "exe");
                changed = true;
            }
        }
    }

    if (changed) {
        if (!json.writeJson(entries, buffer)) {
            return(false);
        }
    }
    return(true);
}